"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.d# Redis Cache Settings는 아래 TESTING 조건문에서만 정의
"""

# 이메일 보낼 때 SSL 인증서 경로 인식 불가 시 설정
import os
import sys
from datetime import timedelta
from pathlib import Path
from typing import Any

import certifi
from dotenv import dotenv_values

os.environ["SSL_CERT_FILE"] = certifi.where()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# dotenv_values 메서드는 env 파일의 경로를 파라미터로 전달 받아 해당 파일을 읽어온 후 Key, Value 형태로 매핑하여 dict로 반환합니다.
ENV = dotenv_values(BASE_DIR / "envs/.env")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ENV.get(
    "DJANGO_SECRET_KEY",
    "django-insecure-k-=4gg*i3t49&!8i14gwzuvnd+wtfsr7ihtbny-s#po8%50y@p",
)

# 테스트 모드 감지 (sys.argv, 환경 변수, pytest 모듈)
TESTING = any(
    [len(sys.argv) > 1 and sys.argv[1] == "test", os.environ.get("DJANGO_TESTING") == "True", "pytest" in sys.modules]
)

# URL Configuration
ROOT_URLCONF = "config.urls.urls_dev"

# WSGI Configuration
WSGI_APPLICATION = "config.wsgi.application"

# Application definition
DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework_simplejwt",
    "django_filters",
    "corsheaders",
    "drf_yasg",
]

PROJECT_APPS = [
    "apps.analytics",
    "apps.chat_message",
    "apps.chat_room",
    "apps.cs_post",
    "apps.cs_reply",
    "apps.dashboard_summary",
    "apps.faq",
    "apps.image",
    "apps.like",
    "apps.notice",
    "apps.notification",
    "apps.order.apps.OrderConfig",
    "apps.order_status_log",
    "apps.preset_message",
    "apps.progress",
    "apps.review",
    "apps.user",
    "apps.work",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + PROJECT_APPS

# Middleware
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Template Configuration
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Auth settings
AUTH_USER_MODEL = "user.User"
LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/"

# Logging
LOG_DIR = Path(ENV.get("LOG_DIR", BASE_DIR / "logs"))
LOG_DIR.mkdir(parents=True, exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOG_DIR / "debug.log",
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": 5,
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": True,
        },
        "apps": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

# Redis Cache Settings - 테스트 시에는 LocMemCache 사용
CACHES: dict[str, Any]
if TESTING:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique-snowflake",
        }
    }
else:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": ENV.get("REDIS_URL", "redis://127.0.0.1:6379/1"),
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "RETRY_ON_TIMEOUT": True,
                "MAX_CONNECTIONS": 100,
                "CONNECTION_POOL_KWARGS": {
                    "retry_on_timeout": True,
                    "socket_connect_timeout": 5,
                    "socket_timeout": 5,
                },
                "SOCKET_TIMEOUT": 5,
                "SOCKET_CONNECT_TIMEOUT": 5,
                "RETRY_TIMES": 3,
                "IGNORE_EXCEPTIONS": True,
            },
        }
    }

# Cache session backend
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# Cache timeout settings
CACHE_TTL = 60 * 15  # 15 minutes

# REST Framework settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("rest_framework_simplejwt.authentication.JWTAuthentication",),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}

# JWT settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "SIGNING_KEY": SECRET_KEY,
}

# Cache timeout settings
EMAIL_VERIFICATION_TIMEOUT_MINUTES = 30
PASSWORD_RESET_TIMEOUT_MINUTES = 30

# Simple JWT settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=int(ENV.get("ACCESS_TOKEN_LIFETIME_MINUTES", 60))),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=int(ENV.get("REFRESH_TOKEN_LIFETIME_DAYS", 7))),
    "ROTATE_REFRESH_TOKENS": ENV.get("ROTATE_REFRESH_TOKENS", "True").lower() == "true",
    "BLACKLIST_AFTER_ROTATION": ENV.get("BLACKLIST_AFTER_ROTATION", "True").lower() == "true",
    "UPDATE_LAST_LOGIN": ENV.get("UPDATE_LAST_LOGIN", "False").lower() == "true",
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

# Swagger/OpenAPI settings
SWAGGER_SETTINGS = {
    "USE_SESSION_AUTH": False,
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"},
    },
    "JSON_EDITOR": True,
}

# DRF YASG settings for OpenAPI 3.0
SPECTACULAR_SETTINGS = {
    "TITLE": "PR Order API",
    "DESCRIPTION": "PR Order 서비스의 API 문서입니다.",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOauth2Info": True,
    },
    "POSTPROCESSING_HOOKS": ["drf_yasg.hooks.postprocess_schema"],
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Custom Password Validator
AUTH_PASSWORD_VALIDATORS.append({"NAME": "apps.user.validators.CustomPasswordValidator"})

# Internationalization
LANGUAGE_CODE = "ko-kr"
TIME_ZONE = "Asia/Seoul"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [BASE_DIR / "static"]

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom user model
AUTH_USER_MODEL = "user.User"

# Email settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = ENV.get("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = int(ENV.get("EMAIL_PORT", "587"))
EMAIL_USE_TLS = ENV.get("EMAIL_USE_TLS", "True").lower() == "true"
EMAIL_HOST_USER = ENV.get("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = ENV.get("EMAIL_HOST_PASSWORD", "")
DEFAULT_FROM_EMAIL = ENV.get("DEFAULT_FROM_EMAIL", "webmaster@localhost")

# Cloudinary settings
CLOUDINARY_CLOUD_NAME = ENV.get("CLOUDINARY_CLOUD_NAME", "")
CLOUDINARY_API_KEY = ENV.get("CLOUDINARY_API_KEY", "")
CLOUDINARY_API_SECRET = ENV.get("CLOUDINARY_API_SECRET", "")

# Login attempt limits
LOGIN_ATTEMPTS_LIMIT = int(ENV.get("LOGIN_ATTEMPTS_LIMIT", 5))
LOGIN_LOCKOUT_TIME = int(ENV.get("LOGIN_LOCKOUT_TIME", 300))  # seconds

# --- 보안 관련 옵션 및 환경별 분리 가이드 ---
# - prod.py: SECURE_SSL_REDIRECT, SESSION_COOKIE_SECURE, CSRF_COOKIE_SECURE, HSTS 등 True/강화
# - local.py: 개발 편의상 False, CORS 허용 등
# - 모든 민감 정보(SECRET_KEY, DB, EMAIL 등)는 ENV로만 관리
# - SIMPLE_JWT/쿠키/CSRF 옵션은 prod에서 Secure/HttpOnly/SameSite=Strict 권장
# - settings 구조 및 override 주석 보강

# SIMPLE_JWT 예시 (prod 환경에서 쿠키 Secure/HttpOnly/SameSite 적용 필요)
SIMPLE_JWT["REFRESH_TOKEN_NAME"] = "refresh_token"  # 쿠키명
# prod.py에서 쿠키 set_cookie 시 secure=True, httponly=True, samesite="Strict" 권장

# CSRF/SESSION 쿠키 옵션 (prod.py에서 Secure/HttpOnly/SameSite=Strict)
# prod.py 예시:
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SAMESITE = "Strict"
# CSRF_COOKIE_SAMESITE = "Strict"

# 이메일/DB/클라우드 등 민감 정보는 반드시 ENV에서만 읽도록 유지

# --- Celery 설정 ---
CELERY_BROKER_URL = ENV.get("CELERY_BROKER_URL", "redis://127.0.0.1:6379/1")
CELERY_RESULT_BACKEND = ENV.get("CELERY_RESULT_BACKEND", CELERY_BROKER_URL)
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE

# Celery Beat 스케줄 예시 (알림 리마인더, 예약 작업 등)
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    # 매일 자정에 오래된 알림 자동 삭제
    "daily_cleanup": {
        "task": "apps.notification.tasks.daily_cleanup",
        "schedule": crontab(minute=0, hour=0),
    },
    # 예시: 매일 오전 9시에 특정 사용자에게 리마인더 알림 전송
    # "send_reminder_notification": {
    #     "task": "apps.notification.tasks.send_reminder_notification",
    #     "schedule": crontab(minute=0, hour=9),
    #     "args": [1, "리마인더", "오늘은 중요한 일이 있습니다!"]
    # },
}

# --- Sentry 연동 (운영 환경에서만 활성화 권장) ---
SENTRY_DSN = ENV.get("SENTRY_DSN", "")
if SENTRY_DSN:
    import sentry_sdk

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        traces_sample_rate=0.2,
        environment=ENV.get("DJANGO_ENV", "local"),
    )

# Sentry 연동 예시
# import sentry_sdk
# sentry_sdk.init(dsn=os.environ.get('SENTRY_DSN'), traces_sample_rate=1.0)

# drf-yasg: INSTALLED_APPS에 'drf_yasg' 추가, urls.py에 schema_view 등록
# Django Debug Toolbar: INSTALLED_APPS/MIDDLEWARE에 'debug_toolbar' 추가, INTERNAL_IPS 설정
# 운영 자동화/모니터링 도구는 prod/local 환경에 맞게 분기 적용 권장
