"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# 이메일 보낼 때 SSL 인증서 경로 인식 불가 시 설정
import os

import certifi
from dotenv import dotenv_values

os.environ["SSL_CERT_FILE"] = certifi.where()


from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# dotenv_values 메서드는 env 파일의 경로를 파라미터로 전달 받아 해당 파일을 읽어온 후 Key, Value 형태로 매핑하여 dict로 반환합니다.
ENV = dotenv_values(BASE_DIR / "envs/.env")
# ENV = dotenv_values(BASE_DIR / "envs/.env.prod")  # 배포 환경 테스트

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-k-=4gg*i3t49&!8i14gwzuvnd+wtfsr7ihtbny-s#po8%50y@p"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS: list[str] = []


# Application definition

DJANGO_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.admin",
]

OWN_APPS = [
    "apps.user",
    "apps.idol",
    "apps.notification",
    "apps.post",
    "apps.idol_schedule",
    "apps.comment",
    "apps.like",
    "apps.follow",
    "apps.image",
    "apps.user_schedule",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    # 'django_extensions',
    "rest_framework_simplejwt",  # poetry add djangorestframework-simplejwt
    "rest_framework_simplejwt.token_blacklist",
    "storages",
    "corsheaders",
    "drf_yasg",
    "cloudinary",
    # "cloudinary_storage",
]

INSTALLED_APPS = DJANGO_APPS + OWN_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",  # 보안 관련 HTTP 헤더 자동 설정 (예: X-Content-Type-Options, X-Frame-Options, HTTPS 리다이렉트 등).
    "django.contrib.sessions.middleware.SessionMiddleware",  # Django의 세션 관리를 담당. 서버 기반 세션(Cookie + DB)에 사용. 주로 서버 렌더링 웹사이트에서 로그인 상태 유지 등에 사용됨.
    "django.middleware.common.CommonMiddleware",  # 여러 가지 일반적인 HTTP 처리 기능 제공. URL 끝에 슬래시 자동 추가 (APPEND_SLASH). 잘못된 요청 보완, 간단한 리다이렉트 처리 등.
    # "django.middleware.csrf.CsrfViewMiddleware",  # Django의 기본 CSRF 보호 미들웨어.  서버 렌더링 기반 웹사이트에 최적화.  쿠키 + 폼 기반 CSRF 검증 수행.
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# 프론트 도메인 등록
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:5173",
    "https://wistar.o-r.kr",
]

# 쿠키 포함 허용
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]

# 기본경로
# ROOT_URLCONF = "config.urls"
# 바뀐경로
ROOT_URLCONF = "config.urls.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# 개발 환경에서 사용하는 경로
STATIC_URL = "static/"
STATIC_DIR = BASE_DIR / "static"

STATICFILES_DIRS = [
    STATIC_DIR,
]

# 배포할 때 사용하는 경로
STATIC_ROOT = BASE_DIR / ".static_root"

# Media
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Auth
AUTH_USER_MODEL = "user.User"  # 유저 모델 지정


# 이런식으로 아이디랑 비밀번호 설정해놓고 같이 깃에 올라가면 누군가 볼 수도있고
# 비공개 리파짓토리라도 중간에 탈취당할 위험이 있음.
# 그래서 환경변수를 사용해서 정보를 내 컴퓨터에서 읽어오도록함.
# EMAIL_HOST_USER = 'test@gmail.com'
# EMAIL_HOST_PASSWORD = '1111'


# .config_secret 폴더 만들고
# 폴더에 secret.json 만들고
# .gitignore에 추가한 후 관리
# print(SECRET['DB']['HOST'])
# print(SECRET['DB2']['HOST'])
# 이렇게 쓸 수도있고 dotenv를 통해 관리할 수도 있음

LOGIN_URL = "/api/user/login/"
LOGOUT_REDIRECT_URL = "/api/user/login/"
# LOGOUT_REDIRECT_URL = '/'


# REST_FRAMEWORK 설정
REST_FRAMEWORK = {
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 10,
    "EXCEPTION_HANDLER": "config.exception_handler.custom_exception_handler",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}


# JWT 설정
SIMPLE_JWT = {
    "BLACKLIST_AFTER_ROTATION": True,
    # "ROTATE_REFRESH_TOKENS": True,  # 리프레시 토큰을 사용할 때마다 새로운 리프레시 토큰을 발급. 기본값 False
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    # It will work instead of the default serializer(TokenObtainPairSerializer).
    "TOKEN_OBTAIN_SERIALIZER": "utils.jwt_serializers.WiStarTokenObtainPairSerializer",
    # ...
}

# 소셜로그인에 사용할 url
# FRONTEND_URL = "/frontend_url"
# 백엔드에서 임시로 테스트
FRONTEND_URL = "/api/users"

# 자동 슬래시 붙이는 기능 끄기
APPEND_SLASH = False

# 특정앱 스웨거에서 임시로 비활성화
# config.schema.py에서 설정
SWAGGER_EXCLUDED_APPS = [
    # "apps.user.views",
    # "apps.idol.views",
    # "apps.notification.views",
    # "apps.post.views",
    # "apps.comment.views",
    # "apps.like.views",
    # "apps.follow.views",
    # "apps.image.views",
    # "apps.idol_schedule.views",
    # "apps.user_schedule.views",
]  # 제외할 앱 이름


SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "JWT 인증을 위해 다음과 같이 입력하세요: **Bearer &lt;access_token&gt;**",
        }
    },
}
