name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        containerEnv:
          REDIS_DB: "1"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Add poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry lock
          poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction --no-root

      - name: Install and run pre-commit
        run: |
          poetry add --group dev pre-commit black isort
          poetry run pre-commit install
          poetry run pre-commit autoupdate
          poetry run pre-commit run --all-files || true

      - name: Run code format check (black & isort)
        run: |
          poetry run isort .
          poetry run black .

      - name: Install and run mypy
        run: |
          poetry add --group dev mypy django-stubs types-requests
          poetry run mypy . --config-file pyproject.toml

      - name: Run tests with coverage
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          DJANGO_SETTINGS_MODULE: config.settings.settings
          SECRET_KEY: test-key
          DEBUG: "True"
          ALLOWED_HOSTS: localhost,127.0.0.1
          CORS_ALLOWED_ORIGINS: http://localhost:3000,http://127.0.0.1:3000
          REDIS_URL: redis://localhost:6379/1
          CACHE_URL: redis://localhost:6379/1
        run: |
          poetry add --group dev coverage pytest pytest-django pytest-cov factory-boy faker pytest-factoryboy django-stubs djangorestframework-stubs types-requests
          mkdir -p static
          poetry run pytest --cov=apps --cov-report=term-missing --cov-report=xml
          poetry run coverage report --fail-under=80

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  security:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Add poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Verify Poetry Installation
        run: poetry --version

      - name: Install dependencies
        run: |
          poetry add "djangorestframework-simplejwt==5.3.1" "pyjwt>=2.8.0"
          poetry install --no-interaction --no-root
          poetry add --group dev bandit

      - name: Run security checks with bandit
        run: poetry run bandit -r ./apps -c pyproject.toml

  deploy:
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Add poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PASSWORD }}
          command_timeout: 5m
          script: |
            cd /home/ubuntu/WiStarBack
            git pull origin main
            poetry install --no-root
            sudo systemctl restart gunicorn
            sudo systemctl reload nginx
